#! /bin/bash

testerDirectory=/home/ssdavis/60/p1/Testing
maxSleep=10   # 10 seconds to complete one run.
if [ $# -ne 1 ]; then
  echo "testhw usage: testhw LongInt_directory"
  exit
fi

cd $1
rm -f *.out out*.txt result*.txt *.dat CPUTimer.* StackAr* QueueAr* *akefile LongIntMain.* &> /dev/null
cp -f $testerDirectory/*.cpp $testerDirectory/*.h $testerDirectory/*.dat $testerDirectory/Makefile .
echo -n "Scores from p1 for " > results.txt

if [ -e authors.csv ]; then
  dos2unix -q authors.csv
  awk -F, '{printf"%s,%s ", $2, $3}' authors.csv >> results.txt
  awk -F, '{printf"%s,%s\n", $2, $3}' authors.csv > names.txt
  echo -e "\n\nNote that the format for authors.csv is: e-mail<comma>last name<comma>first name" >> results.txt
  echo "For example: ssdavis@ucdavis.edu,Davis,Sean"  >> results.txt
  awk -F, {'printf"%s ", $1'} authors.csv > addresses
else
  echo  "You need to create an authors.csv file!!!! No one will receive credit for this assignment"  >> results.txt
  echo "$1@ucdavis.edu" > addresses
  finger ${PWD##*/} | awk 'NR == 1 {printf"%s,%s", $NF, $4}' > names.txt
fi

echo -en "\nAddresses used: " >> results.txt
cat addresses >> results.txt
echo " " >> results.txt
echo "Directory: $1"

TTScore=0
echo "Timetest testing:" 
echo "Timetest testing:" >> results.txt

if [ ! -e timetest.cpp ]; then
  echo "timetest.cpp does not exist."  >> results.txt
else
  g++ timetest.cpp >& /dev/null

  if [[ ! -e ./a.out ]]; then # a.out not found
    echo "timetest.cpp does not compile!"  >> results.txt
  else
    TTScore=5
    fileNum=1
    echo timetest.cpp operation testing:  >> results.txt

    while [[ $fileNum -lt 7 ]]; do
      echo $fileNum  1>&2
      echo "#$fileNum for user input: " >> results.txt
      cat $testerDirectory/input$fileNum.txt >> results.txt
      rm -f out$fileNum.txt
      (./a.out < $testerDirectory/input$fileNum.txt | awk '/CPU/ {print int($6 * 1000) }' | head -1 > out$fileNum.txt )&
      sleep 2
      pkill a.out >& /dev/null
      testTime=0

      if [ -e out$fileNum.txt ]; then
        testTime=`cat out$fileNum.txt`
      fi

      if [[ $testTime -gt 10 && $testTime -lt 1000 ]]; then
        echo OK >> results.txt
      else
        echo "Not OK, CPU time outside acceptable range" >> results.txt
        echo $testTime >> results.txt
        (( --TTScore ))
      fi

      (( fileNum++ ))
    done  # while less than 7
  fi # if timetest a.out
fi # if timetest.cpp exists

if [ $TTScore -lt 0 ]; then
  TTScore=0
fi

fileNum=7
LongIntScore=0
echo LongInt testing:  
echo -e "\nLongInt testing:" >> results.txt
rm -f ./LongInt.out >& /dev/null

make >& /dev/null

if [ -e ./LongInt.out ]; then
  if grep "\[" LongInt.cpp LongInt.h ; then
    echo "Found '[' in your LongInt code, and use of arrays was not permitted, so zero." >> results.txt
  else # array not found
    while [[ $fileNum -lt 11 ]]; do
      echo $fileNum  
      echo "File#: $fileNum " >> results.txt
      rm -f out$fileNum.txt  
      (./LongInt.out < $testerDirectory/input$fileNum.txt | head -20 > out$fileNum.txt )&
      sleep 1
      pkill LongInt.out >& /dev/null
      rm core >& /dev/null

      if [[ -s out$fileNum.txt ]]; then
        diff out$fileNum.txt $testerDirectory/out$fileNum.txt > temp

        if [ -s temp ] ; then
          echo "Not OK" >> results.txt
          echo "Yours:" >> results.txt
          cat out$fileNum.txt >> results.txt
          echo -e "\n\nSean's:" >> results.txt
          cat  $testerDirectory/out$fileNum.txt >> results.txt
        else
          echo "OK" >> results.txt
          (( LongIntScore += 5 ))
        fi
      else
        echo "No output created so zero for this file." >> results.txt
      fi

      fileNum=$((fileNum + 1))
    done  # while less than 11
  fi  # else no array found
else
  echo "No LongInt.out created, so zero."  >> results.txt
fi

echo  "Timetest score: $TTScore  LongInt score: $LongIntScore"  >> results.txt
(( totalScore =  LongIntScore + TTScore ))
echo "Total: $totalScore out of 25.">> results.txt

#  mailx -s "ECS 60 P1 Test Results" `cat addresses` < results.txt

# awk 'NR == 1 {printf"%s,", $0}' names.txt >> ../results.csv
#echo " ${1%%/},$totalScore,$TTScore,$LongIntScore" >> ../results.csv
#authorCount=$(grep "@" authors.csv | wc -l)

#if [ $authorCount -gt 1 ]; then
#  awk 'NR == 2 {printf"%s,", $0}' names.txt >> ../results.csv
#  echo "${1%%/},$totalScore,$TTScore,$LongIntScore" >> ../results.csv
#fi
